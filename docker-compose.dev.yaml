version: '3.8'

services:
  # ========== APP ==========
  app:
    build:
#      dockerfile: dockerfile.dev
      dockerfile: Dockerfile
      context: .
    environment:
      - GO_ENV=development
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - ./migrations:/app/migrations:ro
      - ./configs:/app/config:ro
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - monitoring
    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '1.0'
#          memory: 512M
#        reservations:
#          cpus: '0.5'
#          memory: 256M
    healthcheck:
      test: ["CMD-SHELL","curl -f http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ========== POSTGRES ==========
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${DB_USER} -d ${DB_NAME} -h db || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    ports:
      - "5433:${DB_PORT}"
  # ========== REDIS ==========
  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  # ========== RABBITMQ ==========
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
    ports:
      - "5672:5672" # amqp
      - "15672:15672"   # api
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6

  # ========== MIGRATIONS ==========
  migrate:
    image: migrate/migrate:latest
    volumes:
      - ./migrations:/migrations:ro
    entrypoint: ["sh", "-c", "migrate -path=./migrations -database \"postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable\" -verbose up"]
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    restart: "no"



  # ========== PROMETHEUS ==========
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ========== GRAFANA ==========
  grafana:
    image: grafana/grafana:9.5.2
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ========== EXPORTERS ==========
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable"
    networks:
      - monitoring
      - backend
    depends_on:
      - db
    restart: unless-stopped

  redis_exporter:
    image: oliver006/redis_exporter:v1.42.0
    command: ["--redis.addr","redis:6379"]
    networks:
      - monitoring
      - backend # TODO networks
    depends_on:
      - redis
    restart: unless-stopped

  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter:latest
    environment:
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASS}
      - RABBIT_URL=http://${RABBIT_HOST}:${RABBIT_API_PORT}
    networks:
      - monitoring
      - backend # TODO networks
    depends_on:
      - rabbitmq
    restart: unless-stopped

  # ========== JAEGER ==========
  jaeger:
    image: jaegertracing/all-in-one:1.43
    ports:
      - "6831:6831/udp"   # агент
      - "16686:16686"     # UI
      - "14268:14268"     # HTTP collector
    networks:
      - monitoring
    restart: unless-stopped

  # ========== PGADMIN ==========
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "8081:80"
    volumes:
      - pgadmindata:/var/lib/pgadmin
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:
  rabbitmqdata:
  grafanadata:
  pgadmindata:

networks:
  backend:
  monitoring:
